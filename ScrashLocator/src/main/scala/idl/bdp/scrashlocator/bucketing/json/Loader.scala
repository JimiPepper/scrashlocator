package idl.bdp.scrashlocator.bucketing.json

import java.io.{FileNotFoundException}
import scala.collection.mutable
import scala.reflect.io.{File}
import net.liftweb.json._


/**
 * Loads json file according to eclipse bug report json format
 * @note : Needs a bucket file in json where all buckets are assigned to bug reports to work
 * @author Romain Philippon
$ */

object Loader {

  /**
   * Gives the path to json length method file
   */
  var lengthMethodPath : String = null

  /**
   * Gives the path to bucket json file
   */
  var bucketFilePath : String = null

  /**
   * Gives the folder path to eclipse bug report json files
   */
  var pathJsonReport : String = null

  implicit val formats = DefaultFormats

  /**
   * Loads all eclipse bug reports by using the bucket file
   * @note Needs the bucket file generated by bucketing.Bucketing object included in this project
   * @return the reports if they exists
   */
  def allReports() : Either[FileNotFoundException, Map[Int, List[BugReport]]] = {
    def loadAndLoadFile(jsonReport : File) : BugReport = { parse(jsonReport.lines.mkString).extract[BugReport] }

    val bucketFile = File(bucketFilePath) // load buckets.json file

    if(bucketFile exists) {
      val bucketsList = parse(bucketFile.lines.mkString).extract[Map[String, List[String]]]

      /* LOAD BUG FILE BY BUCKET */
      Right(bucketsList.toMap map {
        case (idBucket, idBugList) => (idBucket.toInt, idBugList.map(idBug => loadAndLoadFile(File(pathJsonReport +"\\"+ idBug +".json")) ))
      })
    }
    else {
      Left(new FileNotFoundException("Found no directory at "+ pathJsonReport))
    }
  }

  /**
   * Loads all method lengths by using the method length file
   * @note Needs the method length file generated by spoon.MethodAnalyzer object included in this project
   * @return for each method in length-method file its length
   */
  def methodLengthFile() : Either[FileNotFoundException, Map[String, Int]] = {
    val lengthMethodFile = File(lengthMethodPath) // load length-method.json file

    if(lengthMethodFile exists) {
      /* LOADING THE FILE */
      val lengthMethodContent = parse(lengthMethodFile.lines.mkString).extract[Map[String, Int]]

      Right(lengthMethodContent)
    }
    else {
      Left(new FileNotFoundException("Found no directory at "+ pathJsonReport))
    }
  }
}